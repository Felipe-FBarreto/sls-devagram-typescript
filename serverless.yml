
service: sls-devagram-typescript

custom:
  userPoolId: 'us-east-1_Lja3wUyz4'
  userPoolClientId: '4q37t18t85srocltaru383eu82'
  userTableName: users-table-${self:provider.stage}
  avatarBucket: ${self:service}-${self:provider.stage}-avatars-devagram-user
  apigwBinary:
    types:
      - 'multipart/form-data'

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
    USER_TABLE: ${self:custom.userTableName}
    AVATAR_BUCKET: ${self:custom.avatarBucket}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:*
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTableName}"

plugins:
  - serverless-plugin-typescript
  - serverless-apigw-binary

functions:
  singup:
    handler: src/functions/auth.register
    events:
      - http: 
         path: register
         method: post
         cors: true
  confirmEmail:
    handler: src/functions/auth.confirmEmail
    events:
      - http:
          path: confirmEmail
          method: post
          cors: true
  forgotPassword:
    handler: src/functions/auth.forgotPassword
    events:
      - http:
          path: forgotPassword
          method: post
          cors: true
  confirmPassword:
    handler: src/functions/auth.changePassword
    events:
      - http:
          path: changePassword
          method: put
          cors: true

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AdminCreateUserConfig:
           AllowAdminCreateUserOnly: false
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: 'Seu código de verificação para o cadastro devagram é: {####}'
        EmailVerificationSubject: 'Código de verificação devragram'
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
    CognitoUserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        AllowedOAuthFlows:
         - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
        CallbackURLs:
          - https://www.google.com
        LogoutURLs:
          - https://www.google.com
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        SupportedIdentityProviders: 
          - COGNITO
        ReadAttributes:
          - email
        WriteAttributes:
          - email
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: ${self:service}-${self:provider.stage}-user-pool-domain-barreto-dev
    AvatarsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.avatarBucket}
        AccessControl: Private
    AvatarsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AvatarsBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AvatarsBucket
                  - "/*"
              Principal: '*'
              

